@page "/"

@using Newtonsoft.Json
@using YetAnotherNoteSaver.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http;

<PageTitle>YANS!</PageTitle>

<div class="contain">
@foreach (var item in notes)
{
        <NoteItem note="@item" OnEditItemCallback="@EditModal" OnRemoveItemCallback="@RemoveNoteItem"></NoteItem>
}
</div>


<div class="modal @modal.Class" tabindex="-1" role="dialog" style="display:@modal.Display; overflow-y: auto;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <input type="text" id="title" placeholder="Note Title" class="modal-title modal-inputs" @bind="@modal.Title" @oninput="@((e) => { modal.Title=(string)e.Value;})">
            </div>
            <div class="modal-body">
                <textarea class="modal-inputs" cols="30" rows="10" placeholder="Note Description" @bind="@modal.NoteDescription" @oninput="@((e) => { modal.NoteDescription=(string)e.Value;})"></textarea>
            </div>
            <div class="modal-footer">
                <div>
                    <button @onclick="CloseModal" type="button" class="btn btn-secondary mx-3">Cancel</button>
                    @if (modal.Edit == false)
                    {
                        <button @onclick="AddNoteItem" type="button" class="btn btn-primary">Submit</button>
                    
                    }else{
                        <button @onclick="EditNoteItem" type="button" class="btn btn-success">Save</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (modal.Backdrop)
{
        <div class="modal-backdrop fade show" style="z-index: 39;"></div>
}


<button class="float add-note" type="button" @onclick="OpenModal">
        <i class="fa-solid fa-plus"></i>
</button>

@code {
    // Todo- implement web api
    public List<NoteModel> notes = new List<NoteModel>();
    private ModalModel modal = new ModalModel();

    private int GetNoteIndex(Guid id){
        for (int i = 0; i < notes.Count(); i++)
        {
            if (notes[i].Id == id)
            {
                return i;
            }
        }
        return -1;
    }

    private async Task RemoveNoteItem(Guid id)
    {
        int nID = GetNoteIndex(id);
        if (nID >= 0){
            notes.RemoveAt(nID);
            await SyncNotesData();
        }
    }
    private async Task EditNoteItem()
    {
        int nID = GetNoteIndex(modal.Id);
        if (nID >= 0){
            notes[nID].Title = modal.Title;
            notes[nID].NoteDescription = modal.NoteDescription;
            CloseModal();
            await SyncNotesData();
        }
    }
    private void EditModal(Guid id)
    {
        int nID = GetNoteIndex(id);
        if (nID >= 0){
            modal.Id = id;
            modal.Edit = true;
            modal.Title = notes[nID].Title;
            modal.NoteDescription = notes[nID].NoteDescription;
            OpenModal();
        }
    }

    private void OpenModal(){
        modal.Open();
        StateHasChanged();
    }

    private void CloseModal(){
        modal.Close();
        modal = new ModalModel();
        StateHasChanged();
    }

    private async Task AddNoteItem(){
        string[] colors = { "green", "brown", "purple", "blue", "yellow", "orange" };
        
        if (String.IsNullOrWhiteSpace(modal.Title))
            modal.Title = "Untitled";
            
        if (String.IsNullOrWhiteSpace(modal.NoteDescription))
            modal.NoteDescription = "Empty Description";

        NoteModel note = new NoteModel()
            {
            Id = Guid.NewGuid(),
            Title = modal.Title,
            NoteDescription = modal.NoteDescription,
            color = colors[Random.Shared.Next(0, colors.Length)]
        };
        notes.Add(note);
        await SyncNotesData();
        CloseModal();
    }

    private async Task SyncNotesData(){
        string output = JsonConvert.SerializeObject(notes);
        await localStorage.SetItemAsStringAsync("notelist",output);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string notesJson = await localStorage.GetItemAsStringAsync("notelist");
            if (!string.IsNullOrEmpty(notesJson))
            {
                notes = JsonConvert.DeserializeObject<List<NoteModel>>(notesJson);
            }
            //var notess = await Http.GetFromJsonAsync<List<NoteModel>>("remote web server");
            //notes = notess;
        }
        catch (Exception)
        {
            Console.WriteLine("error reading data");
        }

    }

}